import * as wasm from './wasm_magnetic_mirror_bg.wasm';

const heap = new Array(32).fill(undefined);

heap.push(undefined, null, true, false);

function getObject(idx) { return heap[idx]; }

let WASM_VECTOR_LEN = 0;

let cachegetUint8Memory0 = null;
function getUint8Memory0() {
    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
    }
    return cachegetUint8Memory0;
}

const lTextEncoder = typeof TextEncoder === 'undefined' ? (0, module.require)('util').TextEncoder : TextEncoder;

let cachedTextEncoder = new lTextEncoder('utf-8');

const encodeString = (typeof cachedTextEncoder.encodeInto === 'function'
    ? function (arg, view) {
    return cachedTextEncoder.encodeInto(arg, view);
}
    : function (arg, view) {
    const buf = cachedTextEncoder.encode(arg);
    view.set(buf);
    return {
        read: arg.length,
        written: buf.length
    };
});

function passStringToWasm0(arg, malloc, realloc) {

    if (realloc === undefined) {
        const buf = cachedTextEncoder.encode(arg);
        const ptr = malloc(buf.length);
        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);
        WASM_VECTOR_LEN = buf.length;
        return ptr;
    }

    let len = arg.length;
    let ptr = malloc(len);

    const mem = getUint8Memory0();

    let offset = 0;

    for (; offset < len; offset++) {
        const code = arg.charCodeAt(offset);
        if (code > 0x7F) break;
        mem[ptr + offset] = code;
    }

    if (offset !== len) {
        if (offset !== 0) {
            arg = arg.slice(offset);
        }
        ptr = realloc(ptr, len, len = offset + arg.length * 3);
        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);
        const ret = encodeString(arg, view);

        offset += ret.written;
    }

    WASM_VECTOR_LEN = offset;
    return ptr;
}

let cachegetInt32Memory0 = null;
function getInt32Memory0() {
    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
    }
    return cachegetInt32Memory0;
}

const lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;

let cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });

cachedTextDecoder.decode();

function getStringFromWasm0(ptr, len) {
    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
}

let heap_next = heap.length;

function addHeapObject(obj) {
    if (heap_next === heap.length) heap.push(heap.length + 1);
    const idx = heap_next;
    heap_next = heap[idx];

    heap[idx] = obj;
    return idx;
}

function dropObject(idx) {
    if (idx < 36) return;
    heap[idx] = heap_next;
    heap_next = idx;
}

function takeObject(idx) {
    const ret = getObject(idx);
    dropObject(idx);
    return ret;
}

let stack_pointer = 32;

function addBorrowedObject(obj) {
    if (stack_pointer == 1) throw new Error('out of js stack');
    heap[--stack_pointer] = obj;
    return stack_pointer;
}

function _assertClass(instance, klass) {
    if (!(instance instanceof klass)) {
        throw new Error(`expected instance of ${klass.name}`);
    }
    return instance.ptr;
}
/**
*/
export class Config {

    static __wrap(ptr) {
        const obj = Object.create(Config.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_config_free(ptr);
    }
    /**
    * @returns {number}
    */
    get b0() {
        var ret = wasm.__wbg_get_config_b0(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set b0(arg0) {
        wasm.__wbg_set_config_b0(this.ptr, arg0);
    }
    /**
    * @returns {number}
    */
    get l() {
        var ret = wasm.__wbg_get_config_l(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set l(arg0) {
        wasm.__wbg_set_config_l(this.ptr, arg0);
    }
    /**
    * @returns {number}
    */
    get vel_par() {
        var ret = wasm.__wbg_get_config_vel_par(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set vel_par(arg0) {
        wasm.__wbg_set_config_vel_par(this.ptr, arg0);
    }
    /**
    * @returns {number}
    */
    get vel_perp() {
        var ret = wasm.__wbg_get_config_vel_perp(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set vel_perp(arg0) {
        wasm.__wbg_set_config_vel_perp(this.ptr, arg0);
    }
    /**
    * @returns {number}
    */
    get n_steps() {
        var ret = wasm.__wbg_get_config_n_steps(this.ptr);
        return ret >>> 0;
    }
    /**
    * @param {number} arg0
    */
    set n_steps(arg0) {
        wasm.__wbg_set_config_n_steps(this.ptr, arg0);
    }
    /**
    * @returns {any}
    */
    static empty() {
        var ret = wasm.config_empty();
        return takeObject(ret);
    }
    /**
    * @param {any} val
    * @returns {Config}
    */
    static from_struct(val) {
        try {
            var ret = wasm.config_from_struct(addBorrowedObject(val));
            return Config.__wrap(ret);
        } finally {
            heap[stack_pointer++] = undefined;
        }
    }
}
/**
*/
export class State {

    static __wrap(ptr) {
        const obj = Object.create(State.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_state_free(ptr);
    }
    /**
    * @returns {number}
    */
    get field_mag() {
        var ret = wasm.__wbg_get_state_field_mag(this.ptr);
        return ret;
    }
    /**
    * @param {number} arg0
    */
    set field_mag(arg0) {
        wasm.__wbg_set_state_field_mag(this.ptr, arg0);
    }
    /**
    * @returns {number}
    */
    x() {
        var ret = wasm.__wbg_get_config_b0(this.ptr);
        return ret;
    }
    /**
    * @returns {number}
    */
    y() {
        var ret = wasm.__wbg_get_config_l(this.ptr);
        return ret;
    }
    /**
    * @returns {number}
    */
    z() {
        var ret = wasm.__wbg_get_config_vel_par(this.ptr);
        return ret;
    }
    /**
    * @returns {number}
    */
    vx() {
        var ret = wasm.__wbg_get_config_vel_perp(this.ptr);
        return ret;
    }
    /**
    * @returns {number}
    */
    vy() {
        var ret = wasm.state_vy(this.ptr);
        return ret;
    }
    /**
    * @returns {number}
    */
    vz() {
        var ret = wasm.state_vz(this.ptr);
        return ret;
    }
    /**
    * @param {number} dt
    * @param {number} b0
    * @param {number} l
    * @returns {State}
    */
    step(dt, b0, l) {
        var ret = wasm.state_step(this.ptr, dt, b0, l);
        return State.__wrap(ret);
    }
    /**
    * @returns {number}
    */
    mag_moment() {
        var ret = wasm.state_mag_moment(this.ptr);
        return ret;
    }
    /**
    * @returns {number}
    */
    energy() {
        var ret = wasm.state_energy(this.ptr);
        return ret;
    }
    /**
    * @returns {number}
    */
    v_perp() {
        var ret = wasm.state_v_perp(this.ptr);
        return ret;
    }
}
/**
*/
export class Trajectory {

    static __wrap(ptr) {
        const obj = Object.create(Trajectory.prototype);
        obj.ptr = ptr;

        return obj;
    }

    free() {
        const ptr = this.ptr;
        this.ptr = 0;

        wasm.__wbg_trajectory_free(ptr);
    }
    /**
    * @param {Config} c
    * @returns {Trajectory}
    */
    static new(c) {
        _assertClass(c, Config);
        var ptr0 = c.ptr;
        c.ptr = 0;
        var ret = wasm.trajectory_new(ptr0);
        return Trajectory.__wrap(ret);
    }
    /**
    * @param {number} dt
    * @param {Config} c
    * @returns {Trajectory}
    */
    static try_new(dt, c) {
        _assertClass(c, Config);
        var ptr0 = c.ptr;
        c.ptr = 0;
        var ret = wasm.trajectory_try_new(dt, ptr0);
        return Trajectory.__wrap(ret);
    }
    /**
    * @param {number} i
    * @returns {State}
    */
    at(i) {
        var ret = wasm.trajectory_at(this.ptr, i);
        return State.__wrap(ret);
    }
}

export const __wbindgen_json_serialize = function(arg0, arg1) {
    const obj = getObject(arg1);
    var ret = JSON.stringify(obj === undefined ? null : obj);
    var ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);
    var len0 = WASM_VECTOR_LEN;
    getInt32Memory0()[arg0 / 4 + 1] = len0;
    getInt32Memory0()[arg0 / 4 + 0] = ptr0;
};

export const __wbg_log_0aa7c485b853c606 = function(arg0, arg1) {
    console.log(getStringFromWasm0(arg0, arg1));
};

export const __wbindgen_json_parse = function(arg0, arg1) {
    var ret = JSON.parse(getStringFromWasm0(arg0, arg1));
    return addHeapObject(ret);
};

export const __wbindgen_throw = function(arg0, arg1) {
    throw new Error(getStringFromWasm0(arg0, arg1));
};

